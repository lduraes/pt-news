disabled_rules: # rule identifiers to exclude from running
  - xctfail_message

excluded: # paths to ignore during linting. overridden by `included`.
  - Carthage
  - Pods
  - External
  - Submodules

# rule parameters
cyclomatic_complexity:
  - 10 #warning
  - 15 #error

# rules that have both warning and error levels, can set just the warning level
# implicitly
line_length: 
  warning: 180
  error: 220
  ignores_comments: true
  ignores_urls: true

# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names
type_name:
  min_length: 3 # only warning
  max_length: # warning and error
    warning: 50
    error: 60
  excluded: iPhone # excluded via string

identifier_name:
  severity: warning
  min_length: 2 # only warning
  max_length: 50 # warning 
  excluded: # excluded via string array
    - id
    - URL
  validates_start_with_lowercase: true

function_parameter_count:
  warning: 5
  error: 8

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
# force_cast: warning # implicitly
force_try:
  severity: warning # explicitly

opt_in_rules:
 # - missing_docs
  - force_unwrapping
  - control_statement
  - private_outlet
  - vertical_whitespace

reporter: "xcode" # reporter type (xcode, json, csv, checkstyle)

analyzer_rules: # Rules run by `swiftlint analyze` (experimental)
  - explicit_self
  
##custom_rules:
##  extra_whitespace:
##    name: "Extra whitespaces"
##    regex: "([a-zA-Z0-9=?.\(\),><!'\"][ ]{2,}[a-zA-Z0-9?.\(\),><!'\"])"
##    message: "Remove extra whitespaces"
##    severity: warning
##  comments_space:
##    name: "Space After Comment"
##    regex: "(^ *//\w+)"
##    message: "There should be a space after //"
##    severity: warning
##  empty_first_line:
##    name: "Empty First Line"
##    regex: "(^[ a-zA-Z ]*(?:protocol|extension|class|struct) (?!(?:var|let))[ a-zA-Z:]*\{\n *\S+)"
##    message: "There should be an empty line after a declaration"
##    severity: warning
##  empty_line_after_super:
##    name: "Empty Line After Super"
##    regex: "(^ *super\.[ a-zA-Z0-9=?.\(\)\{\}:,><!]*\n *(?!(?:\}|return))\S+)"
##    message: "There should be an empty line after super"
##    severity: warning
##  multiple_empty_lines:
##    name: "Multiple Empty Lines"
##    regex: "((?:\s*\n){3,})"
##    message: "There are too many empty lines"
##    severity: warning
##  unnecessary_leading_void_in:
##    name: "Unnecessary -> Void in at the end of the line"
##    regex: "(-> (Void|\(\)) in$)"
##    message: "Unnecessary '-> Void in' at the end of the line. Use only 'in'"
##    severity: warning
##  unnecessary_type:
##    name: "Unnecessary Type"
##    regex: "(?sm)[ \ta-zA-Z0-9]?(?:let|var){1} [ \ta-zA-Z0-9]+?:[ \t]+?([a-zA-Z0-9]+?)[\t ]+?=[\t ]?\1"
##    message: "Type Definition Not Needed"
##    severity: warning
## empty_closure_params:
##    name: "Empty closure params"
##    regex: "\{ (\(\) -> Void in)$"
##    message: "`() -> Void in` should be avoided"
##    severity: warning
##  invalid_mark_format:
##    name: "Invalid MARK Format"
##    regex: "(?m-s)(\/\/[\s]*?MARK(?!(\:[\s]{1}\-[\s]{1}){1}))"
##    message: "Use format: MARK: - Your Info"
##    severity: warning


